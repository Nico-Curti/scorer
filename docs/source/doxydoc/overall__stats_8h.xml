<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="overall__stats_8h" kind="file" language="C++">
    <compoundname>overall_stats.h</compoundname>
    <includes refid="common__stats_8h" local="no">common_stats.h</includes>
    <incdepgraph>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>numeric</label>
      </node>
      <node id="2">
        <label>common_stats.h</label>
        <link refid="common__stats_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="8">
        <label>climits</label>
      </node>
      <node id="7">
        <label>set</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="1">
        <label>/home/nico/Code/scorer/include/overall_stats.h</label>
        <link refid="overall__stats_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="overall__stats_8h_1a8c3e48b62c5ca1b1d39984371cf76917" prot="public" static="no" mutable="no">
        <type>struct @62</type>
        <definition>struct @62 get_overall_accuracy</definition>
        <argsstring></argsstring>
        <name>get_overall_accuracy</name>
        <briefdescription>
<para>Overall Accuracy. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">overall_accuracy<sp/>=<sp/>sum(TP)<sp/>/<sp/>POP</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positives for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall accuracy score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="42" column="22"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1aadf1f60e28c4504ee5e247ae0c82689e" prot="public" static="no" mutable="no">
        <type>struct @63</type>
        <definition>struct @63 get_overall_random_accuracy_unbiased</definition>
        <argsstring></argsstring>
        <name>get_overall_random_accuracy_unbiased</name>
        <briefdescription>
<para>Overall random accuracy unbiased. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">overall_random_accuracy<sp/>=<sp/>sum(random_accuracy_unbiased)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RACCU</parametername>
</parameternamelist>
<parameterdescription>
<para>array of random accuracies unbiased for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall random accuracy unbiased score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="63" column="38"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a522c8732c2826df64a65a12b20b045e9" prot="public" static="no" mutable="no">
        <type>struct @64</type>
        <definition>struct @64 get_overall_random_accuracy</definition>
        <argsstring></argsstring>
        <name>get_overall_random_accuracy</name>
        <briefdescription>
<para>Overall random accuracy. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">overall_random_accuracy<sp/>=<sp/>sum(random_accuracy)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RACC</parametername>
</parameternamelist>
<parameterdescription>
<para>array of random accuracies for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall random accuracy score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="84" column="29"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a3909a1c6cda3a5e5fd3b86bfb481c52d" prot="public" static="no" mutable="no">
        <type>struct @65</type>
        <definition>struct @65 get_overall_kappa</definition>
        <argsstring></argsstring>
        <name>get_overall_kappa</name>
        <briefdescription>
<para>Kappa. </para>
        </briefdescription>
        <detaileddescription>
<para>Kappa is a statistic that measures inter-rater agreement for qualitative (categorical) items. It is generally thought to be a more robust measure than simple percent agreement calculation, as kappa takes into account the possibility of the agreement occurring by chance.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">Kappa<sp/>=<sp/>(overall_ACC<sp/>-<sp/>overall_RACC)<sp/>/<sp/>(1<sp/>-<sp/>overall_RACC)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_random_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall RACC value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall ACC value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kappa overall score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="110" column="19"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a54a5326853dbeb30ba323840acdf7e30" prot="public" static="no" mutable="no">
        <type>struct @66</type>
        <definition>struct @66 get_PC_PI</definition>
        <argsstring></argsstring>
        <name>get_PC_PI</name>
        <briefdescription>
<para>Utility function for future scores. </para>
        </briefdescription>
        <detaileddescription>
<para>It compute the simple formula:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">pc<sp/>=<sp/>sum((TOP<sp/>+<sp/>P)/(2<sp/>*<sp/>POP)**2)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PC_PI score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="137" column="11"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a13f735afc67b6ad991b7832bf8b915e9" prot="public" static="no" mutable="no">
        <type>struct @67</type>
        <definition>struct @67 get_PC_AC1</definition>
        <argsstring></argsstring>
        <name>get_PC_AC1</name>
        <briefdescription>
<para>Utility function for future scores. </para>
        </briefdescription>
        <detaileddescription>
<para>It compute the simple formula:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">pi<sp/>=<sp/>(TOP<sp/>*<sp/>P)<sp/>/<sp/>(2<sp/>*<sp/>POP)</highlight></codeline>
<codeline><highlight class="normal">pc<sp/>=<sp/>1<sp/>/<sp/>(abs(C)<sp/>-<sp/>1)<sp/>*<sp/>sum(pi<sp/>*<sp/>(1<sp/>-<sp/>pi))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PC_AC1 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="168" column="12"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a0f97c5f1ea4e1ccee65a79faccaf024c" prot="public" static="no" mutable="no">
        <type>struct @68</type>
        <definition>struct @68 get_PC_S</definition>
        <argsstring></argsstring>
        <name>get_PC_S</name>
        <briefdescription>
<para>One over classes. </para>
        </briefdescription>
        <detaileddescription>
<para>It is just an utility function for future scores.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>classes</parametername>
</parameternamelist>
<parameterdescription>
<para>array of classes found (this variable is useless in the computation but it is necessary for the graph estimation). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PC_S score </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="187" column="10"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a66fee664c29b184437ce722a22e0c1b2" prot="public" static="no" mutable="no">
        <type>struct @69</type>
        <definition>struct @69 get_PI</definition>
        <argsstring></argsstring>
        <name>get_PI</name>
        <briefdescription>
<para>Scott&apos;s Pi. </para>
        </briefdescription>
        <detaileddescription>
<para>Scott&apos;s pi (named after William A. Scott) is a statistic for measuring inter-rater reliability for nominal data in communication studies. Textual entities are annotated with categories by different annotators, and various measures are used to assess the extent of agreement between the annotators, one of which is Scott&apos;s pi. Since automatically annotating text is a popular problem in natural language processing, and the goal is to get the computer program that is being developed to agree with the humans in the annotations it creates, assessing the extent to which humans agree with each other is important for establishing a reasonable upper limit on computer performance.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">pc<sp/>=<sp/>sum((TOP<sp/>+<sp/>P)<sp/>/<sp/>(2<sp/>*<sp/>POP)**2)</highlight></codeline>
<codeline><highlight class="normal">π<sp/>=<sp/>(overall_accuracy<sp/>-<sp/>pc)<sp/>/<sp/>(1<sp/>-<sp/>pc)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PC_PI</parametername>
</parameternamelist>
<parameterdescription>
<para>pc score in the formula. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall accuracy score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="218" column="8"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1acbf4d99aad54c362352b86b73b2519ad" prot="public" static="no" mutable="no">
        <type>struct @70</type>
        <definition>struct @70 get_AC1</definition>
        <argsstring></argsstring>
        <name>get_AC1</name>
        <briefdescription>
<para>Gwet&apos;s AC1. </para>
        </briefdescription>
        <detaileddescription>
<para>AC1 was originally introduced by Gwet in 2001 (Gwet, 2001). The interpretation of AC1 is similar to generalized kappa (Fleiss, 1971), which is used to assess inter-rater reliability when there are multiple raters. Gwet (2002) demonstrated that AC1 can overcome the limitations that kappa is sensitive to trait prevalence and rater&apos;s classification probabilities (i.e., marginal probabilities), whereas AC1 provides more robust measure of inter-rater reliability.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">AC1<sp/>=<sp/>(overall_accuracy<sp/>-<sp/>pc)<sp/>/<sp/>(1<sp/>-<sp/>pc)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PC_AC1</parametername>
</parameternamelist>
<parameterdescription>
<para>the pc in the formula. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall accuracy score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Gwet&apos;s AC1 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="245" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a85254a7cd4c22e82a8637f2736eee72e" prot="public" static="no" mutable="no">
        <type>struct @71</type>
        <definition>struct @71 get_S</definition>
        <argsstring></argsstring>
        <name>get_S</name>
        <briefdescription>
<para>Bennett&apos;s S. </para>
        </briefdescription>
        <detaileddescription>
<para>Bennett, Alpert &amp; Goldstein’s S is a statistical measure of inter-rater agreement. It was created by Bennett et al. in 1954. Bennett et al. suggested adjusting inter-rater reliability to accommodate the percentage of rater agreement that might be expected by chance was a better measure than a simple agreement between raters.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">pc<sp/>=<sp/>1<sp/>/<sp/>abs(C)</highlight></codeline>
<codeline><highlight class="normal">S<sp/>=<sp/>(overall_accuracy<sp/>-<sp/>pc)<sp/>/<sp/>(1<sp/>-<sp/>pc)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PC_S</parametername>
</parameternamelist>
<parameterdescription>
<para>one over classes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall accuracy score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Bennett&apos;s S score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="271" column="7"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1ab6ccc87803f5e9ab90d52441378d7d2b" prot="public" static="no" mutable="no">
        <type>struct @72</type>
        <definition>struct @72 get_kappa_SE</definition>
        <argsstring></argsstring>
        <name>get_kappa_SE</name>
        <briefdescription>
<para>Kappa standard error. </para>
        </briefdescription>
        <detaileddescription>
<para>The standard error(s) of the Kappa coefficient was obtained by Fleiss (1969)</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">Kappa_se<sp/>=<sp/>sqrt((overall_accuracy<sp/>*<sp/>(1<sp/>-<sp/>overall_random_accuracy))<sp/>/<sp/>(1<sp/>-<sp/>overall_random_accuracy)**2)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall ACC value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_random_accuracy_unbiased</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall RACCU value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kappa standard error overall score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="294" column="14"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a01ee799201ea0936bed98a412f612278" prot="public" static="no" mutable="no">
        <type>struct @73</type>
        <definition>struct @73 get_kappa_unbiased</definition>
        <argsstring></argsstring>
        <name>get_kappa_unbiased</name>
        <briefdescription>
<para>Kappa unbiased. </para>
        </briefdescription>
        <detaileddescription>
<para>The unbiased kappa value is defined in terms of total accuracy and a slightly different computation of expected likelihood that averages the reference and response probabilities.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">Kappa_unbiased<sp/>=<sp/>(overall_ACC<sp/>-<sp/>overall_RACCU)<sp/>/<sp/>(1<sp/>-<sp/>overall_RACC)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_random_accuracy_unbiased</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall RACCU value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall ACC value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kappa unbiased overall score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="318" column="20"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1adba2e2b3d6a91b246216468daf359afe" prot="public" static="no" mutable="no">
        <type>struct @74</type>
        <definition>struct @74 get_kappa_no_prevalence</definition>
        <argsstring></argsstring>
        <name>get_kappa_no_prevalence</name>
        <briefdescription>
<para>Kappa no prevalence. </para>
        </briefdescription>
        <detaileddescription>
<para>The kappa statistic adjusted for prevalence.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">Kappa_no_prevalence<sp/>=<sp/>2<sp/>*<sp/>overall_ACC<sp/>-<sp/>1</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall ACC value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kappa without prevalence overall score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="340" column="25"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a127c3850b7891aa066a5c224de004bd9" prot="public" static="no" mutable="no">
        <type>struct @75</type>
        <definition>struct @75 get_kappa_CI_up</definition>
        <argsstring></argsstring>
        <name>get_kappa_CI_up</name>
        <briefdescription>
<para>Kappa 95% CI. </para>
        </briefdescription>
        <detaileddescription>
<para>Kappa 95% Confidence (upper) Interval</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">Kappa_ci<sp/>=<sp/>overall_kappa<sp/>+<sp/>1.96<sp/>*<sp/>kappa_SE</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_kappa</parametername>
</parameternamelist>
<parameterdescription>
<para>Kappa overall score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kappa_SE</parametername>
</parameternamelist>
<parameterdescription>
<para>kappa standard error score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kappa 95% CI (upper bound) score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="363" column="17"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1aaa72e66ad4ee7abc1ff81ccebb68cae1" prot="public" static="no" mutable="no">
        <type>struct @76</type>
        <definition>struct @76 get_kappa_CI_down</definition>
        <argsstring></argsstring>
        <name>get_kappa_CI_down</name>
        <briefdescription>
<para>Kappa 95% CI. </para>
        </briefdescription>
        <detaileddescription>
<para>Kappa 95% Confidence (lower) Interval</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">Kappa_ci<sp/>=<sp/>overall_kappa<sp/>-<sp/>1.96<sp/>*<sp/>kappa_SE</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_kappa</parametername>
</parameternamelist>
<parameterdescription>
<para>Kappa overall score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kappa_SE</parametername>
</parameternamelist>
<parameterdescription>
<para>kappa standard error score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kappa 95% CI (lower bound) score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="386" column="19"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a506e808b396af7f977724f441a6dcb56" prot="public" static="no" mutable="no">
        <type>struct @77</type>
        <definition>struct @77 get_overall_accuracy_se</definition>
        <argsstring></argsstring>
        <name>get_overall_accuracy_se</name>
        <briefdescription>
<para>Standard error. </para>
        </briefdescription>
        <detaileddescription>
<para>The standard error (SE) of a statistic (usually an estimate of a parameter) is the standard deviation of its sampling distribution or an estimate of that standard deviation.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">SE<sp/>=sqrt(overall_accuracy<sp/>*<sp/>(1<sp/>-<sp/>overall_accuracy)<sp/>/<sp/>POP)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall accuracy score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The accuracy standard error score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="410" column="25"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a2bc9180ef9dd9c77bca4f149dcfe0c56" prot="public" static="no" mutable="no">
        <type>struct @78</type>
        <definition>struct @78 get_overall_accuracy_ci_up</definition>
        <argsstring></argsstring>
        <name>get_overall_accuracy_ci_up</name>
        <briefdescription>
<para>95% CI (upper bound) </para>
        </briefdescription>
        <detaileddescription>
<para>In statistics, a confidence interval (CI) is a type of interval estimate (of a population parameter) that is computed from the observed data. The confidence level is the frequency (i.e., the proportion) of possible confidence intervals that contain the true value of their corresponding parameter. In other words, if confidence intervals are constructed using a given confidence level in an infinite number of independent experiments, the proportion of those intervals that contain the true value of the parameter will match the confidence level.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">CI<sp/>=<sp/>overall_accuracy<sp/>+<sp/>1.96<sp/>*<sp/>overall_accuracy_se</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall accuracy score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_accuracy_se</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall standard error score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The upper bound CI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="439" column="28"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a462b21f9542ec24447807293b7a344e7" prot="public" static="no" mutable="no">
        <type>struct @79</type>
        <definition>struct @79 get_overall_accuracy_ci_down</definition>
        <argsstring></argsstring>
        <name>get_overall_accuracy_ci_down</name>
        <briefdescription>
<para>95% CI (lower bound) </para>
        </briefdescription>
        <detaileddescription>
<para>In statistics, a confidence interval (CI) is a type of interval estimate (of a population parameter) that is computed from the observed data. The confidence level is the frequency (i.e., the proportion) of possible confidence intervals that contain the true value of their corresponding parameter. In other words, if confidence intervals are constructed using a given confidence level in an infinite number of independent experiments, the proportion of those intervals that contain the true value of the parameter will match the confidence level.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">CI<sp/>=<sp/>overall_accuracy<sp/>-<sp/>1.96<sp/>*<sp/>overall_accuracy_se</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall accuracy score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overall_accuracy_se</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall standard error score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lower bound CI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="468" column="30"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1aad64978c706acf0e39e22ff2a428e02e" prot="public" static="no" mutable="no">
        <type>struct @80</type>
        <definition>struct @80 get_chi_square</definition>
        <argsstring></argsstring>
        <name>get_chi_square</name>
        <briefdescription>
<para>Chi-squared. </para>
        </briefdescription>
        <detaileddescription>
<para>Pearson&apos;s chi-squared test is a statistical test applied to sets of categorical data to evaluate how likely it is that any observed difference between the sets arose by chance. It is suitable for unpaired data from large samples.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confusion_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Confusion matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positive rates for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positive rates for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Chi-Squared score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="499" column="16"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1aae97daadd1546785d56dc54386cb35fb" prot="public" static="no" mutable="no">
        <type>struct @81</type>
        <definition>struct @81 get_phi_square</definition>
        <argsstring></argsstring>
        <name>get_phi_square</name>
        <briefdescription>
<para>Phi-squared. </para>
        </briefdescription>
        <detaileddescription>
<para>In statistics, the phi coefficient (or mean square contingency coefficient) is a measure of association for two binary variables. Introduced by Karl Pearson, this measure is similar to the Pearson correlation coefficient in its interpretation. In fact, a Pearson correlation coefficient estimated for two binary variables will return the phi coefficient.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">ϕ**2<sp/>=<sp/>χ**2<sp/>/<sp/>POP</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chi_square</parametername>
</parameternamelist>
<parameterdescription>
<para>Chi-Squared score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positive rates for each class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Phi-squared score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="525" column="16"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a5eff5f4c7e166266b087175db6ccffc5" prot="public" static="no" mutable="no">
        <type>struct @82</type>
        <definition>struct @82 get_cramer_V</definition>
        <argsstring></argsstring>
        <name>get_cramer_V</name>
        <briefdescription>
<para>Cramer&apos;s V. </para>
        </briefdescription>
        <detaileddescription>
<para>In statistics, Cramér&apos;s V (sometimes referred to as Cramér&apos;s phi) is a measure of association between two nominal variables, giving a value between 0 and +1 (inclusive). It is based on Pearson&apos;s chi-squared statistic and was published by Harald Cramér in 1946.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">V<sp/>=<sp/>sqrt((ϕ**2)<sp/>/<sp/>(abs(C)<sp/>-<sp/>1)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>phi_square</parametername>
</parameternamelist>
<parameterdescription>
<para>Phi-Squared score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Cramer&apos;s V score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="550" column="14"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a68d98c6b629fd8c15867d67f4ba8c8ff" prot="public" static="no" mutable="no">
        <type>struct @83</type>
        <definition>struct @83 get_response_entropy</definition>
        <argsstring></argsstring>
        <name>get_response_entropy</name>
        <briefdescription>
<para>Response entropy. </para>
        </briefdescription>
        <detaileddescription>
<para>The entropy of the response distribution. The entropy of a distribution is the average negative log probability of outcomes.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">likelihood_response<sp/>=<sp/>TOP/POP</highlight></codeline>
<codeline><highlight class="normal">entropy_response<sp/>=<sp/>-<sp/>sum(likelihood_response<sp/>*<sp/>log2(likelihood_response))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The response entropy score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="575" column="22"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a2142369420e589f6b6e1033ba6a1f3bc" prot="public" static="no" mutable="no">
        <type>struct @84</type>
        <definition>struct @84 get_reference_entropy</definition>
        <argsstring></argsstring>
        <name>get_reference_entropy</name>
        <briefdescription>
<para>Reference entropy. </para>
        </briefdescription>
        <detaileddescription>
<para>The entropy of the decision problem itself as defined by the counts for the reference. The entropy of a distribution is the average negative log probability of outcomes.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">likelihood_reference<sp/>=<sp/>P/POP</highlight></codeline>
<codeline><highlight class="normal">entropy_reference<sp/>=<sp/>-<sp/>sum(likelihood_reference<sp/>*<sp/>log2(likelihood_reference))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The reference entropy score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="601" column="23"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a8021988a31247b373181c90f855c4a86" prot="public" static="no" mutable="no">
        <type>struct @85</type>
        <definition>struct @85 get_cross_entropy</definition>
        <argsstring></argsstring>
        <name>get_cross_entropy</name>
        <briefdescription>
<para>Cross entropy. </para>
        </briefdescription>
        <detaileddescription>
<para>The cross-entropy of the response distribution against the reference distribution. The cross-entropy is defined by the negative log probabilities of the response distribution weighted by the reference distribution.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">likelihood_reference<sp/>=<sp/>P/POP</highlight></codeline>
<codeline><highlight class="normal">likelihood_response<sp/>=<sp/>TOP/POP</highlight></codeline>
<codeline><highlight class="normal">entropy_cross<sp/>=<sp/>-<sp/>sum(likelihood_reference<sp/>*<sp/>log2(likelihood_response))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cross entropy score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="632" column="19"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a40e60b4b3efdee0739e5b449aacc6ff2" prot="public" static="no" mutable="no">
        <type>struct @86</type>
        <definition>struct @86 get_join_entropy</definition>
        <argsstring></argsstring>
        <name>get_join_entropy</name>
        <briefdescription>
<para>Joint entropy. </para>
        </briefdescription>
        <detaileddescription>
<para>The entropy of the joint reference and response distribution as defined by the underlying matrix.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">P<sp/>=<sp/>confusion_matrix<sp/>/<sp/>POP</highlight></codeline>
<codeline><highlight class="normal">entropy_joint<sp/>=<sp/>-<sp/>sum(P<sp/>*<sp/>log2(P))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confusion_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Confusion matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The joint entropy score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="664" column="18"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1ad9842cf78794ad558ce973944be359f7" prot="public" static="no" mutable="no">
        <type>struct @87</type>
        <definition>struct @87 get_conditional_entropy</definition>
        <argsstring></argsstring>
        <name>get_conditional_entropy</name>
        <briefdescription>
<para>Conditional entropy. </para>
        </briefdescription>
        <detaileddescription>
<para>The entropy of the distribution of categories in the response given that the reference category was as specified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confusion_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Confusion matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The conditional entropy score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="696" column="25"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a2517a1fd012e2abef6bee4e6b4e4157c" prot="public" static="no" mutable="no">
        <type>struct @88</type>
        <definition>struct @88 get_mutual_information</definition>
        <argsstring></argsstring>
        <name>get_mutual_information</name>
        <briefdescription>
<para>Mutual information. </para>
        </briefdescription>
        <detaileddescription>
<para>Mutual information is defined as Kullback-Leibler divergence, between the product of the individual distributions and the joint distribution. Mutual information is symmetric. We could also subtract the conditional entropy of the reference given the response from the reference entropy to get the same result.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">MI<sp/>=<sp/>response_entropy<sp/>-<sp/>conditional_entropy</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>response_entropy</parametername>
</parameternamelist>
<parameterdescription>
<para>The response entropy score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conditional_entropy</parametername>
</parameternamelist>
<parameterdescription>
<para>The conditional entropy score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mutual information score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="722" column="24"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1ac872dd87ba55e939b13dafe4394a071d" prot="public" static="no" mutable="no">
        <type>struct @89</type>
        <definition>struct @89 get_kl_divergence</definition>
        <argsstring></argsstring>
        <name>get_kl_divergence</name>
        <briefdescription>
<para>Kullback-Leibler divergence. </para>
        </briefdescription>
        <detaileddescription>
<para>In mathematical statistics, the Kullback–Leibler divergence (also called relative entropy) is a measure of how one probability distribution diverges from a second, expected probability distribution.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">likelihood_response<sp/>=<sp/>TOP/POP</highlight></codeline>
<codeline><highlight class="normal">likelihood_reference<sp/>=<sp/>P/POP</highlight></codeline>
<codeline><highlight class="normal">KL<sp/>=<sp/>-<sp/>sum(likelihood_reference<sp/>*<sp/>log2(likelihood_reference/likelihood_response))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kullback-Leibler divergence score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="756" column="19"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1aa5ecd4b5d8832fcc68542d3cfe911d88" prot="public" static="no" mutable="no">
        <type>struct @90</type>
        <definition>struct @90 get_lambda_B</definition>
        <argsstring></argsstring>
        <name>get_lambda_B</name>
        <briefdescription>
<para>Goodman &amp; Kruskal&apos;s lambda B. </para>
        </briefdescription>
        <detaileddescription>
<para>In probability theory and statistics, Goodman &amp; Kruskal&apos;s lambda is a measure of proportional reduction in error in cross tabulation analysis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confusion_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Confusion matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lambda B score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="786" column="14"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a4a00613c877dfbbd4c7fafd935251cbe" prot="public" static="no" mutable="no">
        <type>struct @91</type>
        <definition>struct @91 get_lambda_A</definition>
        <argsstring></argsstring>
        <name>get_lambda_A</name>
        <briefdescription>
<para>Goodman &amp; Kruskal&apos;s lambda A. </para>
        </briefdescription>
        <detaileddescription>
<para>In probability theory and statistics, Goodman &amp; Kruskal&apos;s lambda is a measure of proportional reduction in error in cross tabulation analysis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confusion_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Confusion matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lambda A score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="820" column="14"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a2bff9a726857020fe9074ddc62ab7a6a" prot="public" static="no" mutable="no">
        <type>struct @92</type>
        <definition>struct @92 get_DF</definition>
        <argsstring></argsstring>
        <name>get_DF</name>
        <briefdescription>
<para>Chi-squared DF. </para>
        </briefdescription>
        <detaileddescription>
<para>Number of degrees of freedom of this confusion matrix for the chi-squared statistic.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">DF<sp/>=<sp/>(abs(C)<sp/>-<sp/>1)**2</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>classes</parametername>
</parameternamelist>
<parameterdescription>
<para>array of classes found (this variable is useless in the computation but it is necessary for the graph estimation). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Chi-squared DF score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="843" column="8"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a2993014ce68215ea40cbdbebfb7dea7f" prot="public" static="no" mutable="no">
        <type>struct @93</type>
        <definition>struct @93 get_overall_jaccard_index</definition>
        <argsstring></argsstring>
        <name>get_overall_jaccard_index</name>
        <briefdescription>
<para>Overall Jaccard index. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">overall_jaccard_index<sp/>=<sp/>sum(jaccard_index)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jaccard_index</parametername>
</parameternamelist>
<parameterdescription>
<para>array of Jaccard indexes for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall Jaccard index score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="864" column="27"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a076b75f73adbcfee1a402983eec9bda7" prot="public" static="no" mutable="no">
        <type>struct @94</type>
        <definition>struct @94 get_hamming_loss</definition>
        <argsstring></argsstring>
        <name>get_hamming_loss</name>
        <briefdescription>
<para>Hamming loss. </para>
        </briefdescription>
        <detaileddescription>
<para>The average Hamming loss or Hamming distance between two sets of samples.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">hamming_loss<sp/>=<sp/>1<sp/>/<sp/>POP<sp/>*<sp/>sum(TP)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positives for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall Hamming loss score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="887" column="18"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1acbc794d6173d22920c2507cfa9c110c1" prot="public" static="no" mutable="no">
        <type>struct @95</type>
        <definition>struct @95 get_zero_one_loss</definition>
        <argsstring></argsstring>
        <name>get_zero_one_loss</name>
        <briefdescription>
<para>Zero-one loss. </para>
        </briefdescription>
        <detaileddescription>
<para>Zero-one loss is a common loss function used with classification learning. It assigns 0 to loss for a correct classification and 1 for an incorrect classification.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">L0<sp/>=<sp/>POP<sp/>-<sp/>sum(TP)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positives for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall Zeor-one loss score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="911" column="19"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1ac2828a86227d85376c7c006cf6fc84a3" prot="public" static="no" mutable="no">
        <type>struct @96</type>
        <definition>struct @96 get_NIR</definition>
        <argsstring></argsstring>
        <name>get_NIR</name>
        <briefdescription>
<para>No information rate. </para>
        </briefdescription>
        <detaileddescription>
<para>Largest class percentage in the data.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">NIR<sp/>=<sp/>1/POP<sp/>max(P)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall No informative rate score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="934" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a7ab499416e763d1c79ebdffd9a2362ad" prot="public" static="no" mutable="no">
        <type>struct @97</type>
        <definition>struct @97 get_p_value</definition>
        <argsstring></argsstring>
        <name>get_p_value</name>
        <briefdescription>
<para>P-Value. </para>
        </briefdescription>
        <detaileddescription>
<para>In statistical hypothesis testing, the p-value or probability value is, for a given statistical model, the probability that, when the null hypothesis is true, the statistical summary (such as the absolute value of the sample mean difference between two compared groups) would be greater than or equal to the actual observed results. Here a one-sided binomial test to see if the accuracy is better than the no information rate.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">x<sp/>=<sp/>sum(TP)</highlight></codeline>
<codeline><highlight class="normal">p<sp/>=<sp/>NIR</highlight></codeline>
<codeline><highlight class="normal">n<sp/>=<sp/>POP</highlight></codeline>
<codeline><highlight class="normal">p_value<sp/>=<sp/>1<sp/>-<sp/>sum([binomial(n,<sp/>i)<sp/>*<sp/>p**i<sp/>*<sp/>(1<sp/>-<sp/>p)**(n<sp/>-<sp/>i)<sp/>for<sp/>i<sp/>in<sp/>range(x)])</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of number of true positives for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NIR</parametername>
</parameternamelist>
<parameterdescription>
<para>the overall No informative rate score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The p-value score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="996" column="13"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a09c3e19ca884f27b9aac19f681cdff4f" prot="public" static="no" mutable="no">
        <type>struct @98</type>
        <definition>struct @98 get_overall_CEN</definition>
        <argsstring></argsstring>
        <name>get_overall_CEN</name>
        <briefdescription>
<para>Overall CEN. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CEN</parametername>
</parameternamelist>
<parameterdescription>
<para>array of confusion entropies for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall CEN score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1026" column="17"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a7e94c54ff1419ce32a927dc4a9991fb6" prot="public" static="no" mutable="no">
        <type>struct @99</type>
        <definition>struct @99 get_overall_MCEN</definition>
        <argsstring></argsstring>
        <name>get_overall_MCEN</name>
        <briefdescription>
<para>Overall MCEN. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positive values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MCEN</parametername>
</parameternamelist>
<parameterdescription>
<para>array of modified confusion entropies for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall MCEN score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1060" column="18"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a5602f17172c1ba0d7f730cde2f24ab8a" prot="public" static="no" mutable="no">
        <type>struct @100</type>
        <definition>struct @100 get_overall_MCC</definition>
        <argsstring></argsstring>
        <name>get_overall_MCC</name>
        <briefdescription>
<para>Overall MCC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confusion_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Confusion matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The overall MCC score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1091" column="17"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1ac2cad4806a4cd0737fa765f06f5c5938" prot="public" static="no" mutable="no">
        <type>struct @101</type>
        <definition>struct @101 get_RR</definition>
        <argsstring></argsstring>
        <name>get_RR</name>
        <briefdescription>
<para>Global performance index. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">RR<sp/>=<sp/>1<sp/>/<sp/>abs(C)<sp/>*<sp/>sum(confusion_matrix)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The RR index score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1113" column="8"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a52079d84fb9795fd58aac290b49c1e25" prot="public" static="no" mutable="no">
        <type>struct @102</type>
        <definition>struct @102 get_CBA</definition>
        <argsstring></argsstring>
        <name>get_CBA</name>
        <briefdescription>
<para>Class balance accuracy. </para>
        </briefdescription>
        <detaileddescription>
<para>As an evaluation tool, CBA creates an overall assessment of model predictive power by scrutinizing measures simultaneously across each class in a conservative manner that guarantees that a model’s ability to recall observations from each class and its ability to do so efficiently won’t fall below the bound.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">CBA<sp/>=<sp/>sum(confusion_matrix<sp/>/<sp/>max(TOP,<sp/>P))<sp/>/<sp/>abs(C)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confusion_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Confusion matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TOP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CBA score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1146" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a6ae08d8384964d5e84f13a3186338c7e" prot="public" static="no" mutable="no">
        <type>struct @103</type>
        <definition>struct @103 get_AUNU</definition>
        <argsstring></argsstring>
        <name>get_AUNU</name>
        <briefdescription>
<para>AUNU. </para>
        </briefdescription>
        <detaileddescription>
<para>When dealing with multiclass problems, a global measure of classification performances based on the ROC approach (AUNU) has been proposed as the average of single-class measures.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">AUNU<sp/>=<sp/>sum(AUC)<sp/>/<sp/>abs(C)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>AUC</parametername>
</parameternamelist>
<parameterdescription>
<para>array of area under the curve score for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The arrau of AUNU score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1171" column="10"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1aee3a5db2a6005a08d55330bc05c39a55" prot="public" static="no" mutable="no">
        <type>struct @104</type>
        <definition>struct @104 get_AUNP</definition>
        <argsstring></argsstring>
        <name>get_AUNP</name>
        <briefdescription>
<para>AUNP. </para>
        </briefdescription>
        <detaileddescription>
<para>Another option (AUNP) is that of averaging the AUCi values with weights proportional to the number of samples experimentally belonging to each class, that is, the a priori class distribution.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">AUNP<sp/>=<sp/>sum(P<sp/>/<sp/>POP<sp/>*<sp/>AUC)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>array of number of positive samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The arrau of AUNP score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1200" column="10"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1af795e0b42070ae39f565ffbf526c24b3" prot="public" static="no" mutable="no">
        <type>struct @105</type>
        <definition>struct @105 get_RCI</definition>
        <argsstring></argsstring>
        <name>get_RCI</name>
        <briefdescription>
<para>Relative classifier information. </para>
        </briefdescription>
        <detaileddescription>
<para>Performance of different classifiers on the same domain can be measured by comparing relative classifier information while classifier information (mutual information) can be used for comparison across different decision problems.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutual_information</parametername>
</parameternamelist>
<parameterdescription>
<para>array of MI scores for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reference_entropy</parametername>
</parameternamelist>
<parameterdescription>
<para>array of reference entropy scores for each class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The RCI score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1221" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a6cc932493984af0924aceb3daff1723f" prot="public" static="no" mutable="no">
        <type>struct @106</type>
        <definition>struct @106 get_CSI</definition>
        <argsstring></argsstring>
        <name>get_CSI</name>
        <briefdescription>
<para>Classification success index. </para>
        </briefdescription>
        <detaileddescription>
<para>The Classification Success Index (CSI) is an overall measure defined by averaging ICSI over all classes.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">CSI<sp/>=<sp/>1<sp/>/<sp/>abs(C)<sp/>*<sp/>sum(ICSI)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ICIS</parametername>
</parameternamelist>
<parameterdescription>
<para>array of individual classification success indexes for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1244" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a4b8abb41fc132fe675292dcda24016ca" prot="public" static="no" mutable="no">
        <type>struct @107</type>
        <definition>struct @107 get_overall_pearson_C</definition>
        <argsstring></argsstring>
        <name>get_overall_pearson_C</name>
        <briefdescription>
<para>Pearson&apos;s C. </para>
        </briefdescription>
        <detaileddescription>
<para>The contingency coefficient is a coefficient of association that tells whether two variables or data sets are independent or dependent of/on each other. It is also known as Pearson’s coefficient (not to be confused with Pearson’s coefficient of skewness).</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">C<sp/>=<sp/>sqrt(χ**2<sp/>/<sp/>(χ**2<sp/>+<sp/>POP))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chi_square</parametername>
</parameternamelist>
<parameterdescription>
<para>Chi-squared score. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>POP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of total samples for each class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Pearson&apos;s C score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1271" column="23"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a2d0d0c13b2822a300d671c5770dd6aa8" prot="public" static="no" mutable="no">
        <type>struct @108</type>
        <definition>struct @108 get_TPR_PPV_F1_micro</definition>
        <argsstring></argsstring>
        <name>get_TPR_PPV_F1_micro</name>
        <briefdescription>
<para>Utility function for micro score evaluation (it is valid for TPR micro, PPV micro, F1 micro) </para>
        </briefdescription>
        <detaileddescription>
<para>The function computes the score according to the formula:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">res<sp/>=<sp/>sum(TP)<sp/>/<sp/>(sum(TP)<sp/>+<sp/>sum(FN))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TP</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positives for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FN</parametername>
</parameternamelist>
<parameterdescription>
<para>array of false negatives for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The required score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1297" column="22"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a2f6fe59dc824fc324e6e619f79a2b444" prot="public" static="no" mutable="no">
        <type>struct @109</type>
        <definition>struct @109 get_MCC_analysis</definition>
        <argsstring></argsstring>
        <name>get_MCC_analysis</name>
        <briefdescription>
<para>Matthews&apos;s benchmark. </para>
        </briefdescription>
        <detaileddescription>
<para>MCC is a confusion matrix method of calculating the Pearson product-moment correlation coefficient (not to be confused with Pearson&apos;s C). Therefore, it has the same interpretation. The score follows the ranges<itemizedlist>
<listitem><para>SOA6 &lt; 0.3 Negligible</para>
</listitem><listitem><para>0.3 &lt; SOA6 &lt; 0.5 Weak</para>
</listitem><listitem><para>0.5 &lt; SOA6 &lt; 0.7 Moderate</para>
</listitem><listitem><para>0.7 &lt; SOA6 &lt; 0.9 Strong</para>
</listitem><listitem><para>0.9 &lt; SOA6 &lt; 1.0 Very strong</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_MCC</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall Matthews correlation coefficient.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of SOA6 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1323" column="18"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a23bbf0258ebf0bdad6d620aac62ca424" prot="public" static="no" mutable="no">
        <type>struct @110</type>
        <definition>struct @110 get_kappa_analysis_cicchetti</definition>
        <argsstring></argsstring>
        <name>get_kappa_analysis_cicchetti</name>
        <briefdescription>
<para>Cicchetti&apos;s benchmark. </para>
        </briefdescription>
        <detaileddescription>
<para>The score follows the ranges<itemizedlist>
<listitem><para>SOA4 &lt; 0.4 Poor</para>
</listitem><listitem><para>0.4 &lt; SOA4 &lt; 0.6 Fair</para>
</listitem><listitem><para>0.6 &lt; SOA4 &lt; 0.75 Good</para>
</listitem><listitem><para>0.75 &lt; SOA4 &lt; 1.0 Excellent</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_kappa</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall Kappa score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of SOA4 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1345" column="30"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a37155ed1005b244429bd9356fbf901f6" prot="public" static="no" mutable="no">
        <type>struct @111</type>
        <definition>struct @111 get_kappa_analysis_koch</definition>
        <argsstring></argsstring>
        <name>get_kappa_analysis_koch</name>
        <briefdescription>
<para>Landis &amp; Koch&apos;s benchmark. </para>
        </briefdescription>
        <detaileddescription>
<para>The score follows the ranges<itemizedlist>
<listitem><para>SOA1 &lt; 0 Poor</para>
</listitem><listitem><para>0 &lt; SOA1 &lt; 0.2 Slight</para>
</listitem><listitem><para>0.2 &lt; SOA1 &lt; 0.4 Fair</para>
</listitem><listitem><para>0.4 &lt; SOA1 &lt; 0.6 Moderate</para>
</listitem><listitem><para>0.6 &lt; SOA1 &lt; 0.8 substantial</para>
</listitem><listitem><para>0.8 &lt; SOA1 &lt; 1.0 Almost perfect</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_kappa</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall Kappa score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of SOA1 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1369" column="25"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1ad2eee3f72af7ae3a145da9103e0efb25" prot="public" static="no" mutable="no">
        <type>struct @112</type>
        <definition>struct @112 get_kappa_analysis_fleiss</definition>
        <argsstring></argsstring>
        <name>get_kappa_analysis_fleiss</name>
        <briefdescription>
<para>Fleiss&apos; benchmark. </para>
        </briefdescription>
        <detaileddescription>
<para>The score follows the ranges<itemizedlist>
<listitem><para>SOA2 &lt; 0.4 Poor</para>
</listitem><listitem><para>0.4 &lt; SOA2 &lt; 0.75 Intermediate to Good</para>
</listitem><listitem><para>SOA2 &gt; 0.75 Excellent</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_kappa</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall Kappa score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of SOA2 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1390" column="27"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1aa2e8698be1bc3882cf5a74fa11ceea91" prot="public" static="no" mutable="no">
        <type>struct @113</type>
        <definition>struct @113 get_kappa_analysis_altman</definition>
        <argsstring></argsstring>
        <name>get_kappa_analysis_altman</name>
        <briefdescription>
<para>Altman&apos;s benchmark. </para>
        </briefdescription>
        <detaileddescription>
<para>The score follows the ranges<itemizedlist>
<listitem><para>SOA3 &lt; 0.2 Poor</para>
</listitem><listitem><para>0.2 &lt; SOA3 &lt; 0.4 Fair</para>
</listitem><listitem><para>0.4 &lt; SOA3 &lt; 0.6 Moderate</para>
</listitem><listitem><para>0.6 &lt; SOA3 &lt; 0.8 Good</para>
</listitem><listitem><para>0.8 &lt; SOA3 &lt; 1.0 Very good</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overall_kappa</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall Kappa score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of SOA3 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1413" column="27"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a9c50818bc8f49f55f050f5954c9691d4" prot="public" static="no" mutable="no">
        <type>struct @114</type>
        <definition>struct @114 get_V_analysis</definition>
        <argsstring></argsstring>
        <name>get_V_analysis</name>
        <briefdescription>
<para>Cramer&apos;s benchmark. </para>
        </briefdescription>
        <detaileddescription>
<para>The score follows the ranges<itemizedlist>
<listitem><para>SOA5 &lt; 0.1 Negligible</para>
</listitem><listitem><para>0.1 &lt; SOA5 &lt; 0.2 Weak</para>
</listitem><listitem><para>0.2 &lt; SOA5 &lt; 0.4 Moderate</para>
</listitem><listitem><para>0.4 &lt; SOA5 &lt; 0.6 Relatively Strong</para>
</listitem><listitem><para>0.6 &lt; SOA5 &lt; 0.8 Strong</para>
</listitem><listitem><para>0.8 &lt; SOA5 &lt; 1.0 Very strong</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cramer_V</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall Cramer&apos;s V score.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of SOA5 score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1437" column="16"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1ac2555731f6d653c011b9de546cd60cc6" prot="public" static="no" mutable="no">
        <type>struct @115</type>
        <definition>struct @115 get_TPR_macro</definition>
        <argsstring></argsstring>
        <name>get_TPR_macro</name>
        <briefdescription>
<para>TPR_Macro. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">TPR_macro<sp/>=<sp/>1/abs(C)<sp/>*<sp/>sum(TP<sp/>/<sp/>(TP<sp/>+<sp/>FN))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TPR</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positive rates for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the TPR macro score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1458" column="15"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a55dcf79756656232c102e2e3af2731ad" prot="public" static="no" mutable="no">
        <type>struct @116</type>
        <definition>struct @116 get_PPV_macro</definition>
        <argsstring></argsstring>
        <name>get_PPV_macro</name>
        <briefdescription>
<para>PPV_Macro. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">PPV_macro<sp/>=<sp/>1/abs(C)<sp/>*<sp/>sum(TP<sp/>/<sp/>(TP<sp/>+<sp/>FN))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PPV</parametername>
</parameternamelist>
<parameterdescription>
<para>array of true positive predicted values for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the PPV macro score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1479" column="15"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1af80270371f57fb7f1b93abf64df8717b" prot="public" static="no" mutable="no">
        <type>struct @117</type>
        <definition>struct @117 get_ACC_macro</definition>
        <argsstring></argsstring>
        <name>get_ACC_macro</name>
        <briefdescription>
<para>ACC_Macro. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">ACC_macro<sp/>=<sp/>1/abs(C)<sp/>*<sp/>sum(ACC)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ACC</parametername>
</parameternamelist>
<parameterdescription>
<para>array of accuracies for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the ACC macro score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1500" column="15"/>
      </memberdef>
      <memberdef kind="variable" id="overall__stats_8h_1a3785142eda5512cc8c79ecf0744c5ab0" prot="public" static="no" mutable="no">
        <type>struct @118</type>
        <definition>struct @118 get_F1_macro</definition>
        <argsstring></argsstring>
        <name>get_F1_macro</name>
        <briefdescription>
<para>F1_Macro. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".python"><codeline><highlight class="normal">F1_macro<sp/>=<sp/>2/abs(C)<sp/>*<sp/>sum((TPR<sp/>*<sp/>PPV)<sp/>/<sp/>(TPR<sp/>+<sp/>PPV))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F1_score</parametername>
</parameternamelist>
<parameterdescription>
<para>array of F1 scores for each class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nclass</parametername>
</parameternamelist>
<parameterdescription>
<para>size of classes array (aka number of classes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the F1 macro score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/scorer/include/overall_stats.h" line="1521" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__overall_stats_h__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__overall_stats_h__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="common__stats_8h" kindref="compound">common_stats.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>__unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>Not<sp/>Visual<sp/>Studio<sp/>Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>__unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__unused<sp/>__attribute__((__unused__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>ACC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(TP,<sp/>TP<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>POP[0];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a8c3e48b62c5ca1b1d39984371cf76917" kindref="member">get_overall_accuracy</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>RACCU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>RACCU,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(RACCU,<sp/>RACCU<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1aadf1f60e28c4504ee5e247ae0c82689e" kindref="member">get_overall_random_accuracy_unbiased</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>RACC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>RACC,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(RACC,<sp/>RACC<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a522c8732c2826df64a65a12b20b045e9" kindref="member">get_overall_random_accuracy</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Kappa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_random_accuracy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(overall_accuracy<sp/>-<sp/>overall_random_accuracy)<sp/>/<sp/>(1.f<sp/>-<sp/>overall_random_accuracy);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a3909a1c6cda3a5e5fd3b86bfb481c52d" kindref="member">get_overall_kappa</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>PC_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>(<sp/>(P[i]<sp/>+<sp/>TOP[i])<sp/>*<sp/>(P[i]<sp/>+<sp/>TOP[i])<sp/>)<sp/>/<sp/>(<sp/>4.f<sp/>*<sp/>POP[i]<sp/>*<sp/>POP[i]<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a54a5326853dbeb30ba323840acdf7e30" kindref="member">get_PC_PI</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>PC_AC1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>AC1<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>(P[i]<sp/>+<sp/>TOP[i])<sp/>/<sp/>(2.f<sp/>*<sp/>POP[i]);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AC1<sp/>+=<sp/>pi<sp/>*<sp/>(1.f<sp/>-<sp/>pi);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AC1<sp/>/<sp/>(Nclass<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a13f735afc67b6ad991b7832bf8b915e9" kindref="member">get_PC_AC1</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>PC_S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>&quot;classes&quot;<sp/>because<sp/>the<sp/>auto-generated<sp/>code<sp/>must<sp/>put<sp/>this<sp/>function<sp/>AFTER<sp/>the<sp/>Nclass<sp/>evalution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(__unused<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>classes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.f<sp/>/<sp/></highlight><highlight class="keyword">static_cast<sp/>&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Nclass);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a0f97c5f1ea4e1ccee65a79faccaf024c" kindref="member">get_PC_S</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Scott<sp/>PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>PC_PI,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(overall_accuracy<sp/>-<sp/>PC_PI)<sp/>/<sp/>(1.f<sp/>-<sp/>PC_PI);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a66fee664c29b184437ce722a22e0c1b2" kindref="member">get_PI</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>AC1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>PC_AC1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(overall_accuracy<sp/>-<sp/>PC_AC1)<sp/>/<sp/>(1.f<sp/>-<sp/>PC_AC1);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1acbf4d99aad54c362352b86b73b2519ad" kindref="member">get_AC1</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Bennett<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>PC_S,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(overall_accuracy<sp/>-<sp/>PC_S)<sp/>/<sp/>(1.f<sp/>-<sp/>PC_S);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a85254a7cd4c22e82a8637f2736eee72e" kindref="member">get_S</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Kappa<sp/>Standard<sp/>Error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_random_accuracy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>sqrt(<sp/>(overall_accuracy<sp/>*<sp/>(1.f<sp/>-<sp/>overall_accuracy)<sp/>)<sp/>/<sp/>(POP[0]<sp/>*<sp/>(1.f<sp/>-<sp/>overall_random_accuracy)*(1.f<sp/>-<sp/>overall_random_accuracy))<sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1ab6ccc87803f5e9ab90d52441378d7d2b" kindref="member">get_kappa_SE</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Kappa<sp/>Unbiased</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_random_accuracy_unbiased,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(overall_accuracy<sp/>-<sp/>overall_random_accuracy_unbiased)<sp/>/<sp/>(1.f<sp/>-<sp/>overall_random_accuracy_unbiased);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a01ee799201ea0936bed98a412f612278" kindref="member">get_kappa_unbiased</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Kappa<sp/>No<sp/>Prevalence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2.f<sp/>*<sp/>overall_accuracy<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1adba2e2b3d6a91b246216468daf359afe" kindref="member">get_kappa_no_prevalence</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Kappa<sp/>95%<sp/>CI<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_kappa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>kappa_SE)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overall_kappa<sp/>+<sp/>1.96<sp/>*<sp/>kappa_SE;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a127c3850b7891aa066a5c224de004bd9" kindref="member">get_kappa_CI_up</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Kappa<sp/>95%<sp/>CI<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_kappa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>kappa_SE)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overall_kappa<sp/>-<sp/>1.96<sp/>*<sp/>kappa_SE;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1aaa72e66ad4ee7abc1ff81ccebb68cae1" kindref="member">get_kappa_CI_down</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>Error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>sqrt(<sp/>(overall_accuracy<sp/>*<sp/>(1.f<sp/>-<sp/>overall_accuracy))<sp/>/<sp/>POP[0]);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a506e808b396af7f977724f441a6dcb56" kindref="member">get_overall_accuracy_se</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>95%<sp/>CI<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy_se)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overall_accuracy<sp/>+<sp/>1.96f<sp/>*<sp/>overall_accuracy_se;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a2bc9180ef9dd9c77bca4f149dcfe0c56" kindref="member">get_overall_accuracy_ci_up</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>95%<sp/>CI<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_accuracy_se)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overall_accuracy<sp/>-<sp/>1.96f<sp/>*<sp/>overall_accuracy_se;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a462b21f9542ec24447807293b7a344e7" kindref="member">get_overall_accuracy_ci_down</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Chi-Squared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>confusion_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>Nclass;<sp/>++j)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>(TOP[j]<sp/>*<sp/>P[i])<sp/>/<sp/>POP[i];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>(confusion_matrix[i<sp/>*<sp/>Nclass<sp/>+<sp/>j]<sp/>-<sp/>expected)<sp/>*<sp/>(confusion_matrix[i<sp/>*<sp/>Nclass<sp/>+<sp/>j]<sp/>-<sp/>expected)<sp/>/<sp/>expected;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1aad64978c706acf0e39e22ff2a428e02e" kindref="member">get_chi_square</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Phi-Squared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>chi_square,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chi_square<sp/>/<sp/>POP[0];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1aae97daadd1546785d56dc54386cb35fb" kindref="member">get_phi_square</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Cramer<sp/>V</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>phi_square,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(phi_square<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Nclass<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a5eff5f4c7e166266b087175db6ccffc5" kindref="member">get_cramer_V</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Response<sp/>Entropy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std<sp/>::<sp/>inner_product(TOP,<sp/>TOP<sp/>+<sp/>Nclass,<sp/>POP,<sp/>0.f,<sp/>std<sp/>::<sp/>plus<sp/>&lt;<sp/>float<sp/>&gt;(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>item,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>pop){</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>likelihood<sp/>=<sp/>item<sp/>/<sp/>pop;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>likelihood<sp/>*<sp/>std<sp/>::<sp/>log2(likelihood);});</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a68d98c6b629fd8c15867d67f4ba8c8ff" kindref="member">get_response_entropy</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Reference<sp/>Entropy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std<sp/>::<sp/>inner_product(P,<sp/>P<sp/>+<sp/>Nclass,<sp/>POP,<sp/>0.f,<sp/>std<sp/>::<sp/>plus<sp/>&lt;<sp/>float<sp/>&gt;(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>item,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>pop){</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>likelihood<sp/>=<sp/>item<sp/>/<sp/>pop;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>likelihood<sp/>*<sp/>std<sp/>::<sp/>log2(likelihood);});</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a2142369420e589f6b6e1033ba6a1f3bc" kindref="member">get_reference_entropy</ref>;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Cross<sp/>Entropy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>(P[i]<sp/>/<sp/>POP[i])<sp/>*<sp/>std<sp/>::<sp/>log2(TOP[i]<sp/>/<sp/>POP[i]);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-res;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a8021988a31247b373181c90f855c4a86" kindref="member">get_cross_entropy</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Joint<sp/>Entropy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>confusion_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f,<sp/>p_prime;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>Nclass;<sp/>++j)</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_prime<sp/>=<sp/>confusion_matrix[i<sp/>*<sp/>Nclass<sp/>+<sp/>j]<sp/>/<sp/>POP[i];</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>(p_prime<sp/>!=<sp/>0.f)<sp/>?<sp/>p_prime<sp/>*<sp/>std<sp/>::<sp/>log2(p_prime)<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-res;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a40e60b4b3efdee0739e5b449aacc6ff2" kindref="member">get_join_entropy</ref>;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Conditional<sp/>Entropy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>confusion_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f,<sp/>p_prime,<sp/>tmp;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>Nclass;<sp/>++j)</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_prime<sp/>=<sp/>confusion_matrix[i<sp/>*<sp/>Nclass<sp/>+<sp/>j]<sp/>/<sp/>P[i];</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>+=<sp/>(p_prime<sp/>!=<sp/>0.f)<sp/>?<sp/>p_prime<sp/>*<sp/>std<sp/>::<sp/>log2(p_prime)<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>tmp<sp/>*<sp/>(P[i]<sp/>/<sp/>POP[i]);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-res;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1ad9842cf78794ad558ce973944be359f7" kindref="member">get_conditional_entropy</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Mutual<sp/>Information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>response_entropy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>conditional_entropy)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>response_entropy<sp/>-<sp/>conditional_entropy;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a2517a1fd012e2abef6bee4e6b4e4157c" kindref="member">get_mutual_information</ref>;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>KL<sp/>Divergence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f,<sp/>reference_likelihood;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reference_likelihood<sp/>=<sp/>P[i]<sp/>/<sp/>POP[i];</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>reference_likelihood<sp/>*<sp/>std<sp/>::<sp/>log2(reference_likelihood<sp/>/<sp/>(TOP[i]<sp/>/<sp/>POP[i]));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1ac872dd87ba55e939b13dafe4394a071d" kindref="member">get_kl_divergence</ref>;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Lambda<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>confusion_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxresponse<sp/>=<sp/>-inf;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxresponse<sp/>=<sp/>TOP[i]<sp/>&gt;<sp/>maxresponse<sp/>?<sp/>TOP[i]<sp/>:<sp/>maxresponse;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>*std<sp/>::<sp/>max_element(confusion_matrix<sp/>+<sp/>i<sp/>*<sp/>Nclass,<sp/>confusion_matrix<sp/>+<sp/>i<sp/>*<sp/>Nclass<sp/>+<sp/>Nclass);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(res<sp/>-<sp/>maxresponse)<sp/>/<sp/>(POP[0]<sp/>-<sp/>maxresponse);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1aa5ecd4b5d8832fcc68542d3cfe911d88" kindref="member">get_lambda_B</ref>;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Lambda<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>confusion_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxreference<sp/>=<sp/>-inf;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxreference<sp/>=<sp/>P[i]<sp/>&gt;<sp/>maxreference<sp/>?<sp/>P[i]<sp/>:<sp/>maxreference;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>-inf;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>Nclass;<sp/>++j)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>confusion_matrix[j<sp/>*<sp/>Nclass<sp/>+<sp/>i]<sp/>&gt;<sp/>m<sp/>?<sp/>confusion_matrix[j<sp/>*<sp/>Nclass<sp/>+<sp/>i]<sp/>:<sp/>m;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(res<sp/>-<sp/>maxreference)<sp/>/<sp/>(POP[0]<sp/>-<sp/>maxreference);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a4a00613c877dfbbd4c7fafd935251cbe" kindref="member">get_lambda_A</ref>;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Chi-Squared<sp/>DF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>&quot;classes&quot;<sp/>because<sp/>the<sp/>auto-generated<sp/>code<sp/>must<sp/>put<sp/>this<sp/>function<sp/>AFTER<sp/>the<sp/>Nclass<sp/>evalutions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(__unused<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>classes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((Nclass<sp/>-<sp/>1)<sp/>*<sp/>(Nclass<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a2bff9a726857020fe9074ddc62ab7a6a" kindref="member">get_DF</ref>;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>J</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>jaccard_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(jaccard_index,<sp/>jaccard_index<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a2993014ce68215ea40cbdbebfb7dea7f" kindref="member">get_overall_jaccard_index</ref>;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Hamming<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.f<sp/>/<sp/>POP[0]<sp/>*<sp/>(POP[0]<sp/>-<sp/>std<sp/>::<sp/>accumulate(TP,<sp/>TP<sp/>+<sp/>Nclass,<sp/>0.f));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a076b75f73adbcfee1a402983eec9bda7" kindref="member">get_hamming_loss</ref>;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Zero-one<sp/>Loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>POP[0]<sp/>-<sp/>std<sp/>::<sp/>accumulate(TP,<sp/>TP<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1acbc794d6173d22920c2507cfa9c110c1" kindref="member">get_zero_one_loss</ref>;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>NIR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std<sp/>::<sp/>max_element(P,<sp/>P<sp/>+<sp/>Nclass)<sp/>/<sp/>POP[0];</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1ac2828a86227d85376c7c006cf6fc84a3" kindref="member">get_NIR</ref>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>P-value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>NIR)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p_value<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/></highlight><highlight class="keyword">static_cast<sp/>&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(std<sp/>::<sp/>accumulate(TP,<sp/>TP<sp/>+<sp/>Nclass,<sp/>0.f));</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x;<sp/>++i)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>i<sp/>&lt;<sp/>POP[0]<sp/>-<sp/>i<sp/>?<sp/>i<sp/>:<sp/>POP[0]<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numer<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>POP[0];</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>&gt;<sp/>POP[0]<sp/>-<sp/>r)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numer<sp/>*=<sp/>iter;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>iter;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>&lt;<sp/>r<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>*=<sp/>iter;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<sp/>iter;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncr<sp/>=<sp/>numer<sp/>/<sp/>denom;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_value<sp/>+=<sp/>ncr<sp/>*<sp/>std<sp/>::<sp/>pow(NIR,<sp/>i)<sp/>*<sp/>std<sp/>::<sp/>pow(1<sp/>-<sp/>NIR,<sp/>POP[0]<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.f<sp/>-<sp/>p_value;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a7ab499416e763d1c79ebdffd9a2362ad" kindref="member">get_p_value</ref>;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>CEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>CEN,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>overall_CEN<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TOP_sum<sp/>=<sp/>std<sp/>::<sp/>accumulate(TOP,<sp/>TOP<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>up<sp/>=<sp/>TOP[i]<sp/>+<sp/>P[i];</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>down<sp/>=<sp/>2.f<sp/>*<sp/>TOP_sum;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overall_CEN<sp/>+=<sp/>(up<sp/>/<sp/>down)<sp/>*<sp/>CEN[i];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overall_CEN;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a09c3e19ca884f27b9aac19f681cdff4f" kindref="member">get_overall_CEN</ref>;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>MCEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>MCEN,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>overall_MCEN<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>Nclass<sp/>==<sp/>2<sp/>?<sp/>0.f<sp/>:<sp/>1.f;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TOP_sum<sp/>=<sp/>std<sp/>::<sp/>accumulate(TOP,<sp/>TOP<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TP_sum<sp/>=<sp/>std<sp/>::<sp/>accumulate(TP,<sp/>TP<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>up<sp/>=<sp/>TOP[i]<sp/>+<sp/>P[i]<sp/>-<sp/>TP[i];</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>down<sp/>=<sp/>2.f<sp/>*<sp/>TOP_sum<sp/>-<sp/>alpha<sp/>*<sp/>TP_sum;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overall_MCEN<sp/>+=<sp/>(up<sp/>/<sp/>down)<sp/>*<sp/>MCEN[i];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overall_MCEN;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a7e94c54ff1419ce32a927dc4a9991fb6" kindref="member">get_overall_MCEN</ref>;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>MCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>confusion_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>std<sp/>::<sp/>accumulate(TOP,<sp/>TOP<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cov_x_y<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cov_x_x<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cov_y_y<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov_x_x<sp/>+=<sp/>TOP[i]<sp/>*<sp/>(s<sp/>-<sp/>TOP[i]);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov_y_y<sp/>+=<sp/>P[i]<sp/>*<sp/><sp/><sp/>(s<sp/>-<sp/>P[i]);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov_x_y<sp/>+=<sp/>confusion_matrix[i<sp/>*<sp/>Nclass<sp/>+<sp/>i]<sp/>*<sp/>s<sp/>-<sp/>P[i]<sp/>*<sp/>TOP[i];</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov_x_y<sp/>/<sp/>std<sp/>::<sp/>sqrt(cov_y_y<sp/>*<sp/>cov_x_x);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a5602f17172c1ba0d7f730cde2f24ab8a" kindref="member">get_overall_MCC</ref>;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>RR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(TOP,<sp/>TOP<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1ac2cad4806a4cd0737fa765f06f5c5938" kindref="member">get_RR</ref>;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>CBA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>confusion_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TOP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CBA<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CBA<sp/>+=<sp/>confusion_matrix[i<sp/>*<sp/>Nclass<sp/>+<sp/>i]<sp/>/<sp/>std<sp/>::<sp/>max(TOP[i],<sp/>P[i]);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CBA<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a52079d84fb9795fd58aac290b49c1e25" kindref="member">get_CBA</ref>;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>AUNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>AUC,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(AUC,<sp/>AUC<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a6ae08d8384964d5e84f13a3186338c7e" kindref="member">get_AUNU</ref>;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>AUNP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>AUC,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>AUNP<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nclass;<sp/>++i)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AUNP<sp/>+=<sp/>P[i]<sp/>/<sp/>POP[i]<sp/>*<sp/>AUC[i];</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AUNP;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1aee3a5db2a6005a08d55330bc05c39a55" kindref="member">get_AUNP</ref>;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>RCI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>mutual_information,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>reference_entropy)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mutual_information<sp/>/<sp/>reference_entropy;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1af795e0b42070ae39f565ffbf526c24b3" kindref="member">get_RCI</ref>;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>CSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>ICSI,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(ICSI,<sp/>ICSI<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a6cc932493984af0924aceb3daff1723f" kindref="member">get_CSI</ref>;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>Pearson<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>chi_square,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>POP)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>sqrt<sp/>(chi_square<sp/>/<sp/>(POP[0]<sp/>+<sp/>chi_square));</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a4b8abb41fc132fe675292dcda24016ca" kindref="member">get_overall_pearson_C</ref>;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>TPR<sp/>Micro,<sp/>PPV<sp/>Micro,<sp/>F1<sp/>Micro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>FN,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TP_sum<sp/>=<sp/>std<sp/>::<sp/>accumulate(TP,<sp/>TP<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FN_sum<sp/>=<sp/>std<sp/>::<sp/>accumulate(FN,<sp/>FN<sp/>+<sp/>Nclass,<sp/>0.f);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TP_sum<sp/>/<sp/>(TP_sum<sp/>+<sp/>FN_sum);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a2d0d0c13b2822a300d671c5770dd6aa8" kindref="member">get_TPR_PPV_F1_micro</ref>;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>SOA6(Matthews)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_MCC)</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>isnan(overall_MCC)<sp/>||<sp/>std<sp/>::<sp/>isinf(overall_MCC)<sp/>?<sp/>-1.f<sp/>:<sp/>overall_MCC<sp/>&lt;<sp/>.3f<sp/>?<sp/>0.f<sp/>:<sp/>overall_MCC<sp/>&gt;=<sp/>.3f<sp/>&amp;&amp;<sp/>overall_MCC<sp/>&lt;<sp/>.5f<sp/>?<sp/>1.f<sp/>:<sp/>overall_MCC<sp/>&gt;=<sp/>.5f<sp/>&amp;&amp;<sp/>overall_MCC<sp/>&lt;<sp/>.7f<sp/>?<sp/>2.f<sp/>:<sp/>overall_MCC<sp/>&gt;=<sp/>.7f<sp/>&amp;&amp;<sp/>overall_MCC<sp/>&lt;<sp/>.9f<sp/>?<sp/>3.f<sp/>:<sp/>4.f;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a2f6fe59dc824fc324e6e619f79a2b444" kindref="member">get_MCC_analysis</ref>;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>SOA4(Cicchetti)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_kappa)</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>isnan(overall_kappa)<sp/>||<sp/>std<sp/>::<sp/>isinf(overall_kappa)<sp/>?<sp/>-1.f<sp/>:<sp/>overall_kappa<sp/>&lt;<sp/>.4f<sp/>?<sp/>0.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.4f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.59f<sp/>?<sp/>1.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.59f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.74f<sp/>?<sp/>2.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.74f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>1.f<sp/>?<sp/>3.f<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a23bbf0258ebf0bdad6d620aac62ca424" kindref="member">get_kappa_analysis_cicchetti</ref>;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>SOA1(Landis<sp/>&amp;<sp/>Koch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_kappa)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>isnan(overall_kappa)<sp/>||<sp/>std<sp/>::<sp/>isinf(overall_kappa)<sp/>?<sp/>-1.f<sp/>:<sp/>overall_kappa<sp/>&lt;<sp/>.0f<sp/>?<sp/>0.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.0f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.2f<sp/>?<sp/>1.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.2f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.4f<sp/>?<sp/>2.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.4f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>6.f<sp/>?<sp/>3.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.6f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.8f<sp/>?<sp/>4.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.8f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;=<sp/>1.f<sp/>?<sp/>5.f<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a37155ed1005b244429bd9356fbf901f6" kindref="member">get_kappa_analysis_koch</ref>;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>SOA2(Fleiss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_kappa)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>isnan(overall_kappa)<sp/>||<sp/>std<sp/>::<sp/>isinf(overall_kappa)<sp/>?<sp/>-1.f<sp/>:<sp/>overall_kappa<sp/>&lt;<sp/>.4f<sp/>?<sp/>0.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.4f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.75f<sp/>?<sp/>1.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.75f<sp/>?<sp/>2.f<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1ad2eee3f72af7ae3a145da9103e0efb25" kindref="member">get_kappa_analysis_fleiss</ref>;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>SOA3(Altman)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>overall_kappa)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>isnan(overall_kappa)<sp/>||<sp/>std<sp/>::<sp/>isinf(overall_kappa)<sp/>?<sp/>-1.f<sp/>:<sp/>overall_kappa<sp/>&lt;<sp/>.2f<sp/>?<sp/>0.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.2f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.4f<sp/>?<sp/>1.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.4f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.6f<sp/>?<sp/>2.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.6f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;<sp/>.8f<sp/>?<sp/>3.f<sp/>:<sp/>overall_kappa<sp/>&gt;=<sp/>.8f<sp/>&amp;&amp;<sp/>overall_kappa<sp/>&lt;=<sp/>1.f<sp/>?<sp/>4.f<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1aa2e8698be1bc3882cf5a74fa11ceea91" kindref="member">get_kappa_analysis_altman</ref>;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>SOA5(Cramer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>cramer_V)</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cramer_V<sp/>&lt;<sp/>.1f<sp/>?<sp/>0.f<sp/>:<sp/>cramer_V<sp/>&gt;=<sp/>.1f<sp/>&amp;&amp;<sp/>cramer_V<sp/>&lt;<sp/>.2f<sp/>?<sp/>1.f<sp/>:<sp/>cramer_V<sp/>&gt;=<sp/>.2f<sp/>&amp;&amp;<sp/>cramer_V<sp/>&lt;<sp/>.4f<sp/>?<sp/>2.f<sp/>:<sp/>cramer_V<sp/>&gt;=<sp/>.4f<sp/>&amp;&amp;<sp/>cramer_V<sp/>&lt;<sp/>.6f<sp/>?<sp/>3.f<sp/>:<sp/>cramer_V<sp/>&gt;=<sp/>.6f<sp/>&amp;&amp;<sp/>cramer_V<sp/>&lt;<sp/>.8f<sp/>?<sp/>4.f<sp/>:<sp/>5.f;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a9c50818bc8f49f55f050f5954c9691d4" kindref="member">get_V_analysis</ref>;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>TPR<sp/>Macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>TPR,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(TPR,<sp/>TPR<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1ac2555731f6d653c011b9de546cd60cc6" kindref="member">get_TPR_macro</ref>;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>PPV<sp/>Macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>PPV,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(PPV,<sp/>PPV<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a55dcf79756656232c102e2e3af2731ad" kindref="member">get_PPV_macro</ref>;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>ACC<sp/>Macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>ACC,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(ACC,<sp/>ACC<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1af80270371f57fb7f1b93abf64df8717b" kindref="member">get_ACC_macro</ref>;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="keyword">struct<sp/></highlight><highlight class="comment">//<sp/>F1<sp/>Macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>F1_SCORE,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>Nclass)</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std<sp/>::<sp/>accumulate(F1_SCORE,<sp/>F1_SCORE<sp/>+<sp/>Nclass,<sp/>0.f)<sp/>/<sp/>Nclass;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">}<sp/><ref refid="overall__stats_8h_1a3785142eda5512cc8c79ecf0744c5ab0" kindref="member">get_F1_macro</ref>;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__overall_stats_h__</highlight></codeline>
    </programlisting>
    <location file="/home/nico/Code/scorer/include/overall_stats.h"/>
  </compounddef>
</doxygen>
